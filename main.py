# main.py
from trading_bot_lib import BotManager, STATE_MANAGER, RSIEMABot, EMACrossoverBot, Reverse24hBot, TrendFollowingBot, ScalpingBot, SafeGridBot
import os
import json
import time
import threading
from flask import Flask, jsonify, request
import logging

# Thi·∫øt l·∫≠p logging cho lu·ªìng ch√≠nh
logger = logging.getLogger(__name__)

# =========================================================
# C·∫§U H√åNH V√Ä BI·∫æN M√îI TR∆Ø·ªúNG
# =========================================================

# Railway s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng PORT. M·∫∑c ƒë·ªãnh l√† 5000 cho local.
PORT = int(os.getenv('PORT', 5000))
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
bot_config_json = os.getenv('BOT_CONFIGS', '[]')

try:
    BOT_CONFIGS = json.loads(bot_config_json)
except Exception as e:
    logger.error(f"L·ªói ph√¢n t√≠ch c·∫•u h√¨nh BOT_CONFIGS: {e}")
    BOT_CONFIGS = []

# =========================================================
# KH·ªûI T·∫†O GLOBAL MANAGER V√Ä FLASK
# =========================================================

manager: BotManager = None 
app = Flask(__name__)

# MAPPER T·ª™ T√äN CHI·∫æN L∆Ø·ª¢C SANG L·ªöP BOT
STRATEGY_MAPPER = {
    "RSI/EMA Recursive": RSIEMABot,
    "EMA Crossover": EMACrossoverBot,
    "Reverse 24h": Reverse24hBot,
    "Trend Following": TrendFollowingBot,
    "Scalping": ScalpingBot,
    "Safe Grid": SafeGridBot
}

def init_manager(api_key, api_secret):
    """Kh·ªüi t·∫°o ho·∫∑c kh·ªüi ƒë·ªông l·∫°i BotManager v√† th√™m c·∫•u h√¨nh m·∫∑c ƒë·ªãnh."""
    global manager
    
    if manager:
        manager.stop_all() # D·ª´ng h·ªá th·ªëng c≈©
        
    manager = BotManager(
        api_key=api_key,
        api_secret=api_secret,
        state_manager=STATE_MANAGER
    )
    
    # Th√™m bot t·ª´ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    if BOT_CONFIGS:
        logger.info(f"ƒêang th√™m {len(BOT_CONFIGS)} bot t·ª´ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh...")
        for config in BOT_CONFIGS:
            symbol = config.get('symbol', None)
            strategy = config.get('strategy')
            lev = config.get('lev')
            percent = config.get('percent')
            tp = config.get('tp')
            sl = config.get('sl', 0)
            threshold = config.get('threshold', 30)

            if strategy and lev and percent and tp:
                manager.add_bot(symbol, lev, percent, tp, sl, strategy, threshold=threshold)
            else:
                logger.warning(f"C·∫•u h√¨nh bot b·ªã thi·∫øu tham s·ªë. B·ªè qua: {config}")
    
    return True

# =========================================================
# API ENDPOINTS
# =========================================================

@app.route('/api/init', methods=['POST'])
def init_bot_manager_api():
    """Endpoint ƒë·ªÉ kh·ªüi t·∫°o/c·∫≠p nh·∫≠t API Key v√† kh·ªüi ƒë·ªông h·ªá th·ªëng."""
    data = request.json
    # ∆Øu ti√™n API Key t·ª´ request body, sau ƒë√≥ l√† bi·∫øn m√¥i tr∆∞·ªùng
    api_key = data.get('api_key', BINANCE_API_KEY)
    api_secret = data.get('api_secret', BINANCE_SECRET_KEY)
    
    if not api_key or not api_secret:
        return jsonify({"success": False, "message": "API Key ho·∫∑c Secret Key b·ªã thi·∫øu"}), 400
        
    try:
        if init_manager(api_key, api_secret):
            return jsonify({"success": True, "message": "H·ªá th·ªëng bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o/c·∫≠p nh·∫≠t API Key th√†nh c√¥ng v√† bot m·∫∑c ƒë·ªãnh ƒë√£ ch·∫°y."}), 200
        else:
            return jsonify({"success": False, "message": "L·ªói kh·ªüi t·∫°o kh√¥ng x√°c ƒë·ªãnh."}), 500
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o h·ªá th·ªëng: {str(e)}")
        return jsonify({"success": False, "message": f"L·ªói kh·ªüi t·∫°o bot: {str(e)}"}), 500


@app.route('/api/status', methods=['GET'])
def get_status():
    """Endpoint tr·∫£ v·ªÅ tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ c√°c bot v√† h·ªá th·ªëng."""
    if not manager:
        return jsonify({"system_status": "Inactive", "message": "H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng g·ª≠i API Key ƒë·∫øn /api/init"}), 200
        
    # L·∫•y s·ªë d∆∞ v√† tr·∫°ng th√°i k·∫øt n·ªëi
    balance = manager._verify_api_connection()
    
    return jsonify({
        "system_status": "Running" if manager.running else "Stopped",
        "binance_connection": "OK" if balance is not None else "Error",
        "binance_balance_usdt": f"{balance:.2f}" if balance is not None else "N/A",
        "active_bots_count": len(STATE_MANAGER.bot_statuses),
        "bot_statuses": STATE_MANAGER.bot_statuses
    })

@app.route('/api/logs', methods=['GET'])
def get_logs():
    """Endpoint tr·∫£ v·ªÅ l·ªãch s·ª≠ logs/giao d·ªãch."""
    return jsonify(STATE_MANAGER.trade_logs)

@app.route('/api/add', methods=['POST'])
def add_bot_web():
    """Endpoint ƒë·ªÉ th√™m m·ªôt bot m·ªõi."""
    if not manager:
        return jsonify({"success": False, "message": "H·ªá th·ªëng ch∆∞a kh·ªüi t·∫°o. Vui l√≤ng g·ª≠i API Key ƒë·∫øn /api/init"}), 400
        
    config = request.json
    symbol = config.get('symbol', None)
    strategy = config.get('strategy')
    lev = config.get('lev')
    percent = config.get('percent')
    tp = config.get('tp')
    sl = config.get('sl', 0)
    threshold = config.get('threshold', 30)

    if not all([strategy, lev, percent, tp]):
        return jsonify({"success": False, "message": "Thi·∫øu c√°c tham s·ªë b·∫Øt bu·ªôc (strategy, lev, percent, tp)"}), 400

    if manager.add_bot(symbol, lev, percent, tp, sl, strategy, threshold=threshold):
        return jsonify({"success": True, "message": f"ƒê√£ th√™m bot {strategy} cho {symbol if symbol else 'AUTO'} th√†nh c√¥ng."}), 200
    else:
        return jsonify({"success": False, "message": f"Kh√¥ng th·ªÉ th√™m bot {strategy}. Ki·ªÉm tra log h·ªá th·ªëng."}), 500

@app.route('/api/stop/<string:bot_id>', methods=['POST'])
def stop_bot_web(bot_id):
    """Endpoint ƒë·ªÉ d·ª´ng m·ªôt bot theo ID."""
    if not manager:
        return jsonify({"success": False, "message": "H·ªá th·ªëng ch∆∞a kh·ªüi t·∫°o."}), 400

    if manager.stop_bot(bot_id):
        return jsonify({"success": True, "message": f"ƒê√£ d·ª´ng bot {bot_id} th√†nh c√¥ng."}), 200
    else:
        return jsonify({"success": False, "message": f"Kh√¥ng t√¨m th·∫•y bot {bot_id} ƒëang ch·∫°y."}), 404

# =========================================================
# KH·ªûI ƒê·ªòNG SERVER
# =========================================================

def run_flask_server():
    """H√†m ch·∫°y Flask server."""
    
    # N·∫øu c√≥ API Key trong bi·∫øn m√¥i tr∆∞·ªùng Railway, kh·ªüi t·∫°o ngay
    if BINANCE_API_KEY and BINANCE_SECRET_KEY:
        try:
            init_manager(BINANCE_API_KEY, BINANCE_SECRET_KEY)
            logger.info("BotManager kh·ªüi t·∫°o t·ª± ƒë·ªông t·ª´ bi·∫øn m√¥i tr∆∞·ªùng th√†nh c√¥ng.")
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o BotManager t·ª± ƒë·ªông: {e}")
            
    logger.info(f"üåê ƒêang kh·ªüi ƒë·ªông Web Server t·∫°i 0.0.0.0:{PORT}")
    # Ch·∫°y Flask Server v·ªõi PORT c·ªßa Railway
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False) 

if __name__ == "__main__":
    run_flask_server()
